{"ast":null,"code":"var _jsxFileName = \"/home/alisson/Desktop/Projetos/TriviaVercel/src/pages/Login.jsx\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { AiFillSetting } from 'react-icons/ai';\nimport { connect } from 'react-redux';\nimport '../App.css';\nimport Logo from \"../images/trivia.svg\";\nimport { fetchToken, gravatarAction, nameAction } from '../Redux/Actions';\nimport styles from '../styles/Login.module.css';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.validateButton = () => {\n      const {\n        email,\n        name\n      } = this.state;\n      const minPasswordLength = 0;\n      const emailFormatRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n      if (name.length > minPasswordLength && email.match(emailFormatRegex)) {\n        this.setState({\n          isButtonDisabled: false\n        });\n      } else {\n        this.setState({\n          isButtonDisabled: true\n        });\n      }\n    };\n\n    this.settingsPage = () => {\n      const {\n        history\n      } = this.props;\n      history.push('/settings');\n    };\n\n    this.onInputChange = _ref => {\n      let {\n        target\n      } = _ref;\n      this.setState({\n        [target.name]: target.value\n      }, this.validateButton);\n    };\n\n    this.handleClick = async () => {\n      const {\n        getFetchToken,\n        history,\n        gravatarImg,\n        link\n      } = this.props;\n      const {\n        email\n      } = this.state;\n      await getFetchToken(link);\n      gravatarImg(email);\n      history.push('/game');\n    };\n\n    this.state = {\n      email: '',\n      name: '',\n      isButtonDisabled: true\n    };\n  }\n\n  render() {\n    const {\n      isButtonDisabled,\n      name,\n      email\n    } = this.state;\n    const {\n      nameProp\n    } = this.props;\n    nameProp(name);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: `${styles['login-background']}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"main\", {\n      className: `col-11 m-auto ${styles['main-login']}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `${styles['login-container']}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: `${styles['logo-image']} img-fluid`,\n      src: Logo,\n      alt: \"Trivia Logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"nameInput\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"name\",\n      \"data-testid\": \"input-player-name\",\n      id: \"nameInput\",\n      value: name,\n      onChange: this.onInputChange,\n      placeholder: \"Digite o seu nome\",\n      className: styles['input-login'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"gravatarEmailInput\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"email\",\n      name: \"email\",\n      id: \"gravatarEmailInput\",\n      \"data-testid\": \"input-gravatar-email\",\n      onChange: this.onInputChange,\n      value: email,\n      placeholder: \"Digite o seu melhor email\",\n      className: styles['input-login'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      disabled: isButtonDisabled,\n      type: \"button\",\n      \"data-testid\": \"btn-play\",\n      onClick: this.handleClick,\n      className: `${styles['button-play']}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, \"Play\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-settings\",\n      onClick: this.settingsPage,\n      className: `${styles['button-settings']}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(AiFillSetting, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    })))));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  getFetchToken: link => dispatch(fetchToken(link)),\n  gravatarImg: gravatar => dispatch(gravatarAction(gravatar)),\n  nameProp: name => dispatch(nameAction(name))\n});\n\nconst mapStateToProps = state => ({\n  token: state.token,\n  link: state.game.linkQuestionsApi\n});\n\nLogin.propTypes = {\n  history: PropTypes.objectOf(PropTypes.any),\n  getFetchToken: PropTypes.func\n}.isRequired;\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/home/alisson/Desktop/Projetos/TriviaVercel/src/pages/Login.jsx"],"names":["PropTypes","React","AiFillSetting","connect","fetchToken","gravatarAction","nameAction","styles","Login","Component","constructor","validateButton","email","name","state","minPasswordLength","emailFormatRegex","length","match","setState","isButtonDisabled","settingsPage","history","props","push","onInputChange","target","value","handleClick","getFetchToken","gravatarImg","link","render","nameProp","Logo","mapDispatchToProps","dispatch","gravatar","mapStateToProps","token","game","linkQuestionsApi","propTypes","objectOf","any","func","isRequired"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { AiFillSetting } from 'react-icons/ai';\nimport { connect } from 'react-redux';\nimport '../App.css';\nimport Logo from '../images/trivia.svg';\nimport { fetchToken, gravatarAction, nameAction } from '../Redux/Actions';\nimport styles from '../styles/Login.module.css';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      email: '',\n      name: '',\n      isButtonDisabled: true,\n    };\n  }\n\n  validateButton = () => {\n    const { email, name } = this.state;\n    const minPasswordLength = 0;\n    const emailFormatRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n    if (name.length > minPasswordLength && email.match(emailFormatRegex)) {\n      this.setState({\n        isButtonDisabled: false,\n      });\n    } else {\n      this.setState({\n        isButtonDisabled: true,\n      });\n    }\n  }\n\n  settingsPage = () => {\n    const { history } = this.props;\n    history.push('/settings');\n  }\n\nonInputChange = ({ target }) => {\n  this.setState({ [target.name]: target.value }, this.validateButton);\n}\n\nhandleClick = async () => {\n  const { getFetchToken, history, gravatarImg, link } = this.props;\n  const { email } = this.state;\n  await getFetchToken(link);\n  gravatarImg(email);\n  history.push('/game');\n}\n\nrender() {\n  const { isButtonDisabled, name, email } = this.state;\n  const { nameProp } = this.props;\n  nameProp(name);\n  return (\n    <div className={ `${styles['login-background']}` }>\n      <main className={ `col-11 m-auto ${styles['main-login']}` }>\n        <div className={ `${styles['login-container']}` }>\n          <img\n            className={ `${styles['logo-image']} img-fluid` }\n            src={ Logo }\n            alt=\"Trivia Logo\"\n          />\n          <label htmlFor=\"nameInput\">\n            <input\n              type=\"text\"\n              name=\"name\"\n              data-testid=\"input-player-name\"\n              id=\"nameInput\"\n              value={ name }\n              onChange={ this.onInputChange }\n              placeholder=\"Digite o seu nome\"\n              className={ styles['input-login'] }\n            />\n          </label>\n\n          <label htmlFor=\"gravatarEmailInput\">\n            <input\n              type=\"email\"\n              name=\"email\"\n              id=\"gravatarEmailInput\"\n              data-testid=\"input-gravatar-email\"\n              onChange={ this.onInputChange }\n              value={ email }\n              placeholder=\"Digite o seu melhor email\"\n              className={ styles['input-login'] }\n            />\n          </label>\n          <button\n            disabled={ isButtonDisabled }\n            type=\"button\"\n            data-testid=\"btn-play\"\n            onClick={ this.handleClick }\n            className={ `${styles['button-play']}` }\n          >\n            Play\n          </button>\n          <button\n            type=\"button\"\n            data-testid=\"btn-settings\"\n            onClick={ this.settingsPage }\n            className={ `${styles['button-settings']}` }\n          >\n            <AiFillSetting />\n          </button>\n        </div>\n      </main>\n    </div>\n  );\n}\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getFetchToken: (link) => dispatch(fetchToken(link)),\n  gravatarImg: (gravatar) => dispatch(gravatarAction(gravatar)),\n  nameProp: (name) => dispatch(nameAction(name)),\n});\n\nconst mapStateToProps = (state) => ({\n  token: state.token,\n  link: state.game.linkQuestionsApi,\n});\n\nLogin.propTypes = {\n  history: PropTypes.objectOf(PropTypes.any),\n  getFetchToken: PropTypes.func,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n"]},"metadata":{},"sourceType":"module"}