{"ast":null,"code":"var _jsxFileName = \"/home/alisson/Desktop/Projetos/sd-019-a-project-trivia-react-redux/src/components/Question.js\";\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { addQtdCorrectAnswers, addScore, answerQuestion, nextQuestion } from '../Redux/Actions';\nimport '../styles/Question.css';\nimport NextButton from './NextButton';\nimport Loading from './Loading';\n\nclass Question extends Component {\n  constructor() {\n    super();\n\n    this.setNextQuestion = () => {\n      const {\n        currentQuestion,\n        btnNextQuestion,\n        results\n      } = this.props;\n\n      if (currentQuestion < results.length - 1) {\n        btnNextQuestion(currentQuestion + 1);\n        this.setState({\n          color: false,\n          correctAnswer: results[currentQuestion + 1].correct_answer,\n          questionAnswered: false,\n          answers: [...results[currentQuestion + 1].incorrect_answers, results[currentQuestion + 1].correct_answer]\n        }, () => this.handleQuestions());\n      }\n    };\n\n    this.handleQuestions = () => {\n      const {\n        answers\n      } = this.state;\n      const random = this.shuffleAnswers(answers);\n      this.setState({\n        answers: random,\n        loading: false\n      });\n    };\n\n    this.shuffleAnswers = array => {\n      let currentIndex = array.length;\n      let randomIndex; // While there remain elements to shuffle...\n\n      while (currentIndex !== 0) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1; // And swap it with the current element.\n\n        [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n      }\n\n      return array;\n    };\n\n    this.isCorrect = answer => {\n      const {\n        correctAnswer,\n        answers\n      } = this.state;\n      const wrongAnswers = answers.filter(a => a !== correctAnswer);\n      if (correctAnswer === answer) return 'correct-answer';\n      return `wrong-answer-${wrongAnswers.indexOf(answer)}`;\n    };\n\n    this.scoreCalculation = (answer, timer, difficulty) => {\n      const {\n        correctAnswer\n      } = this.state;\n      const {\n        score,\n        newScore,\n        countCorrectAnswers,\n        assertions\n      } = this.props;\n      let difficultyValue = 0;\n      const UM = 1;\n      const DOIS = 2;\n      const TRES = 3;\n      const DEZ = 10;\n\n      if (difficulty === 'hard') {\n        difficultyValue = TRES;\n      }\n\n      if (difficulty === 'medium') {\n        difficultyValue = DOIS;\n      }\n\n      if (difficulty === 'easy') {\n        difficultyValue = UM;\n      }\n\n      if (correctAnswer === answer) {\n        newScore(score + DEZ + difficultyValue * timer);\n        countCorrectAnswers(assertions + 1);\n      }\n    };\n\n    this.handleClick = selected => {\n      const {\n        timer,\n        results,\n        currentQuestion,\n        setAnswer\n      } = this.props;\n      const level = results[currentQuestion].difficulty;\n      this.setState({\n        color: true\n      });\n      this.scoreCalculation(selected, timer, level);\n      this.setState({\n        questionAnswered: true\n      });\n      setAnswer();\n    };\n\n    this.isActive = answer => {\n      const {\n        color,\n        correctAnswer\n      } = this.state;\n\n      if (color === true) {\n        if (correctAnswer === answer) return 'correct-answer';\n        return 'wrong-answer';\n      }\n    };\n\n    this.verifyTimer = () => {\n      const {\n        questionAnswered\n      } = this.state;\n      const {\n        timer\n      } = this.props;\n\n      if (timer === 0 || questionAnswered === true) {\n        return true;\n      }\n    };\n\n    this.state = {\n      correctAnswer: '',\n      answers: [],\n      loading: true,\n      color: false,\n      questionAnswered: false\n    };\n  }\n\n  componentDidMount() {\n    const {\n      results,\n      currentQuestion\n    } = this.props;\n    this.setState({\n      correctAnswer: results[currentQuestion].correct_answer,\n      answers: [...results[currentQuestion].incorrect_answers, results[currentQuestion].correct_answer]\n    }, () => this.handleQuestions());\n  }\n\n  render() {\n    const {\n      results,\n      currentQuestion\n    } = this.props;\n    const {\n      loading,\n      answers,\n      questionAnswered\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 7\n      }\n    }, loading === true ? /*#__PURE__*/React.createElement(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }\n    }, questionAnswered && (currentQuestion < results.length - 1 ? /*#__PURE__*/React.createElement(NextButton, {\n      nextQuestion: this.setNextQuestion,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 19\n      }\n    }) : /*#__PURE__*/React.createElement(Link, {\n      to: \"/feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(NextButton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 40\n      }\n    }))), /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"question-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 15\n      }\n    }, results[currentQuestion].category), /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 15\n      }\n    }, results[currentQuestion].question), /*#__PURE__*/React.createElement(\"div\", {\n      \"data-testid\": \"answer-options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 15\n      }\n    }, answers.map((answer, index) => /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      key: index,\n      \"data-testid\": this.isCorrect(answer),\n      className: this.isActive(answer),\n      onClick: () => this.handleClick(answer),\n      disabled: this.verifyTimer(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 19\n      }\n    }, answer)))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  results: state.game.results,\n  currentQuestion: state.game.currentQuestion,\n  timer: state.game.timer,\n  score: state.player.score,\n  assertions: state.player.assertions\n});\n\nconst mapDispatchToProps = dispatch => ({\n  newScore: score => dispatch(addScore(score)),\n  btnNextQuestion: question => dispatch(nextQuestion(question)),\n  countCorrectAnswers: answer => dispatch(addQtdCorrectAnswers(answer)),\n  setAnswer: () => dispatch(answerQuestion())\n});\n\nQuestion.propTypes = {\n  history: PropTypes.objectOf(PropTypes.any),\n  results: PropTypes.arrayOf(PropTypes.any),\n  currentQuestion: PropTypes.number\n}.isRequired;\nexport default connect(mapStateToProps, mapDispatchToProps)(Question);","map":{"version":3,"sources":["/home/alisson/Desktop/Projetos/sd-019-a-project-trivia-react-redux/src/components/Question.js"],"names":["PropTypes","React","Component","connect","Link","addQtdCorrectAnswers","addScore","answerQuestion","nextQuestion","NextButton","Loading","Question","constructor","setNextQuestion","currentQuestion","btnNextQuestion","results","props","length","setState","color","correctAnswer","correct_answer","questionAnswered","answers","incorrect_answers","handleQuestions","state","random","shuffleAnswers","loading","array","currentIndex","randomIndex","Math","floor","isCorrect","answer","wrongAnswers","filter","a","indexOf","scoreCalculation","timer","difficulty","score","newScore","countCorrectAnswers","assertions","difficultyValue","UM","DOIS","TRES","DEZ","handleClick","selected","setAnswer","level","isActive","verifyTimer","componentDidMount","render","category","question","map","index","mapStateToProps","game","player","mapDispatchToProps","dispatch","propTypes","history","objectOf","any","arrayOf","number","isRequired"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { addQtdCorrectAnswers, addScore,\n  answerQuestion, nextQuestion } from '../Redux/Actions';\nimport '../styles/Question.css';\nimport NextButton from './NextButton';\nimport Loading from './Loading';\n\nclass Question extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      correctAnswer: '',\n      answers: [],\n      loading: true,\n      color: false,\n      questionAnswered: false,\n    };\n  }\n\n  componentDidMount() {\n    const { results, currentQuestion } = this.props;\n    this.setState({\n      correctAnswer: results[currentQuestion].correct_answer,\n      answers: [...results[currentQuestion].incorrect_answers,\n        results[currentQuestion].correct_answer],\n    }, () => this.handleQuestions());\n  }\n\n  setNextQuestion = () => {\n    const { currentQuestion, btnNextQuestion, results } = this.props;\n    if (currentQuestion < results.length - 1) {\n      btnNextQuestion(currentQuestion + 1);\n      this.setState({\n        color: false,\n        correctAnswer: results[currentQuestion + 1].correct_answer,\n        questionAnswered: false,\n        answers: [...results[currentQuestion + 1].incorrect_answers,\n          results[currentQuestion + 1].correct_answer],\n      }, () => this.handleQuestions());\n    }\n  }\n\n  handleQuestions = () => {\n    const { answers } = this.state;\n    const random = this.shuffleAnswers(answers);\n    this.setState({\n      answers: random,\n      loading: false,\n    });\n  }\n\n  // Função para ramdomizar o array de respostas baseado no algoritimo de Fisher–Yates shuffle\n  // https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n  shuffleAnswers = (array) => {\n    let currentIndex = array.length; let\n      randomIndex;\n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n    return array;\n  }\n\n  isCorrect = (answer) => {\n    const { correctAnswer, answers } = this.state;\n    const wrongAnswers = answers.filter((a) => a !== correctAnswer);\n    if (correctAnswer === answer) return 'correct-answer';\n    return (`wrong-answer-${wrongAnswers.indexOf(answer)}`);\n  }\n\n  scoreCalculation = (answer, timer, difficulty) => {\n    const { correctAnswer } = this.state;\n    const { score, newScore, countCorrectAnswers, assertions } = this.props;\n    let difficultyValue = 0;\n    const UM = 1;\n    const DOIS = 2;\n    const TRES = 3;\n    const DEZ = 10;\n    if (difficulty === 'hard') {\n      difficultyValue = TRES;\n    }\n    if (difficulty === 'medium') {\n      difficultyValue = DOIS;\n    }\n    if (difficulty === 'easy') {\n      difficultyValue = UM;\n    }\n    if (correctAnswer === answer) {\n      newScore(score + DEZ + (difficultyValue * timer));\n      countCorrectAnswers(assertions + 1);\n    }\n  };\n\n  handleClick = (selected) => {\n    const { timer, results, currentQuestion, setAnswer } = this.props;\n    const level = results[currentQuestion].difficulty;\n    this.setState({\n      color: true,\n    });\n    this.scoreCalculation(selected, timer, level);\n    this.setState({\n      questionAnswered: true,\n    });\n    setAnswer();\n  }\n\n  isActive = (answer) => {\n    const { color, correctAnswer } = this.state;\n    if (color === true) {\n      if (correctAnswer === answer) return 'correct-answer';\n      return 'wrong-answer';\n    }\n  }\n\n  verifyTimer = () => {\n    const { questionAnswered } = this.state;\n    const { timer } = this.props;\n    if (timer === 0 || questionAnswered === true) {\n      return true;\n    }\n  }\n\n  render() {\n    const { results, currentQuestion } = this.props;\n    const { loading, answers, questionAnswered } = this.state;\n    return (\n      <div>\n        {loading === true\n          ? <Loading />\n          : (\n            <div>\n              { questionAnswered && (currentQuestion < results.length - 1\n                ? <NextButton nextQuestion={ this.setNextQuestion } />\n                : <Link to=\"/feedback\"><NextButton /></Link>) }\n              <h2 data-testid=\"question-category\">{results[currentQuestion].category}</h2>\n              <p data-testid=\"question-text\">\n                {results[currentQuestion].question}\n              </p>\n              <div data-testid=\"answer-options\">\n                {answers.map((answer, index) => (\n                  <button\n                    type=\"button\"\n                    key={ index }\n                    data-testid={ this.isCorrect(answer) }\n                    className={ this.isActive(answer) }\n                    onClick={ () => this.handleClick(answer) }\n                    disabled={ this.verifyTimer() }\n                  >\n                    {answer}\n                  </button>))}\n              </div>\n            </div>\n          )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  results: state.game.results,\n  currentQuestion: state.game.currentQuestion,\n  timer: state.game.timer,\n  score: state.player.score,\n  assertions: state.player.assertions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  newScore: (score) => dispatch(addScore(score)),\n  btnNextQuestion: (question) => dispatch(nextQuestion(question)),\n  countCorrectAnswers: (answer) => dispatch(addQtdCorrectAnswers(answer)),\n  setAnswer: () => dispatch(answerQuestion()),\n});\n\nQuestion.propTypes = {\n  history: PropTypes.objectOf(PropTypes.any),\n  results: PropTypes.arrayOf(PropTypes.any),\n  currentQuestion: PropTypes.number,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Question);\n"]},"metadata":{},"sourceType":"module"}