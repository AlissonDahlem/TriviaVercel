{"ast":null,"code":"var _jsxFileName = \"/home/alisson/Desktop/Projetos/sd-019-a-project-trivia-react-redux/src/components/Question.js\";\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Loading from './Loading';\n\nclass Question extends Component {\n  constructor() {\n    super();\n\n    this.handleQuestions = () => {\n      const {\n        answers\n      } = this.state;\n      const random = this.shuffleAnswers(answers);\n      this.setState({\n        answers: random,\n        loading: false\n      });\n    };\n\n    this.shuffleAnswers = array => {\n      let currentIndex = array.length;\n      let randomIndex; // While there remain elements to shuffle...\n\n      while (currentIndex !== 0) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1; // And swap it with the current element.\n\n        [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n      }\n\n      return array;\n    };\n\n    this.isCorrect = answer => {\n      const {\n        correctAnswer,\n        answers\n      } = this.state;\n      const wrongAnswers = answers.filter(a => a !== correctAnswer);\n      if (correctAnswer === answer) return 'correct-answer';\n      return `wrong-answer-${wrongAnswers.indexOf(answer)}`;\n    };\n\n    this.state = {\n      correctAnswer: '',\n      answers: [],\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    const {\n      incorrectAnswersGame,\n      correctAnswerGame\n    } = this.props;\n    this.setState({\n      correctAnswer: correctAnswerGame,\n      answers: [...incorrectAnswersGame, correctAnswerGame]\n    }, () => this.handleQuestions());\n  }\n\n  render() {\n    const {\n      results,\n      currentQuestion\n    } = this.props;\n    const {\n      loading,\n      answers\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }\n    }, loading === true ? /*#__PURE__*/React.createElement(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"question-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 15\n      }\n    }, results[currentQuestion].category), /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 15\n      }\n    }, results[currentQuestion].question), /*#__PURE__*/React.createElement(\"div\", {\n      \"data-testid\": \"answer-options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }\n    }, answers.map((answer, index) => /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      key: index,\n      \"data-testid\": this.isCorrect(answer),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 19\n      }\n    }, answer)))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  results: state.game.results,\n  currentQuestion: state.game.currentQuestion,\n  correctAnswerGame: state.game.results[0].correct_answer,\n  incorrectAnswersGame: state.game.results[0].incorrect_answers\n});\n\nQuestion.propTypes = {\n  results: PropTypes.arrayOf(PropTypes.any),\n  currentQuestion: PropTypes.number\n}.isRequired;\nexport default connect(mapStateToProps)(Question);","map":{"version":3,"sources":["/home/alisson/Desktop/Projetos/sd-019-a-project-trivia-react-redux/src/components/Question.js"],"names":["PropTypes","React","Component","connect","Loading","Question","constructor","handleQuestions","answers","state","random","shuffleAnswers","setState","loading","array","currentIndex","length","randomIndex","Math","floor","isCorrect","answer","correctAnswer","wrongAnswers","filter","a","indexOf","componentDidMount","incorrectAnswersGame","correctAnswerGame","props","render","results","currentQuestion","category","question","map","index","mapStateToProps","game","correct_answer","incorrect_answers","propTypes","arrayOf","any","number","isRequired"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Loading from './Loading';\n\nclass Question extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      correctAnswer: '',\n      answers: [],\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    const { incorrectAnswersGame, correctAnswerGame } = this.props;\n    this.setState({\n      correctAnswer: correctAnswerGame,\n      answers: [...incorrectAnswersGame, correctAnswerGame],\n    }, () => this.handleQuestions());\n  }\n\n  handleQuestions = () => {\n    const { answers } = this.state;\n    const random = this.shuffleAnswers(answers);\n    this.setState({\n      answers: random,\n      loading: false,\n    });\n  }\n\n  // Função para ramdomizar o array de respostas baseado no algoritimo de Fisher–Yates shuffle\n  // https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n  shuffleAnswers = (array) => {\n    let currentIndex = array.length; let\n      randomIndex;\n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n    return array;\n  }\n\n  isCorrect = (answer) => {\n    const { correctAnswer, answers } = this.state;\n    const wrongAnswers = answers.filter((a) => a !== correctAnswer);\n    if (correctAnswer === answer) return 'correct-answer';\n    return (`wrong-answer-${wrongAnswers.indexOf(answer)}`);\n  }\n\n  render() {\n    const { results, currentQuestion } = this.props;\n    const { loading, answers } = this.state;\n    return (\n      <div>\n        {loading === true\n          ? <Loading />\n          : (\n            <div>\n              <h2 data-testid=\"question-category\">{results[currentQuestion].category}</h2>\n              <p data-testid=\"question-text\">\n                {results[currentQuestion].question}\n              </p>\n              <div data-testid=\"answer-options\">\n                {answers.map((answer, index) => (\n                  <button\n                    type=\"button\"\n                    key={ index }\n                    data-testid={ this.isCorrect(answer) }\n                  >\n                    {answer}\n                  </button>))}\n              </div>\n            </div>\n          )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  results: state.game.results,\n  currentQuestion: state.game.currentQuestion,\n  correctAnswerGame: state.game.results[0].correct_answer,\n  incorrectAnswersGame: state.game.results[0].incorrect_answers,\n});\n\nQuestion.propTypes = {\n  results: PropTypes.arrayOf(PropTypes.any),\n  currentQuestion: PropTypes.number,\n}.isRequired;\n\nexport default connect(mapStateToProps)(Question);\n"]},"metadata":{},"sourceType":"module"}