{"ast":null,"code":"var _jsxFileName = \"/home/alisson/Desktop/Projetos/sd-019-a-project-trivia-react-redux/src/pages/Feedback.jsx\";\nimport md5 from 'crypto-js/md5';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport Header from '../components/Header';\nimport { newGame } from '../Redux/Actions';\n\nclass Feedback extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.addToLocalStorage = () => {\n      const currentRanking = JSON.parse(localStorage.getItem('ranking'));\n\n      if (currentRanking) {\n        const {\n          score,\n          playerName,\n          gravatarEmail\n        } = this.props;\n        const hashEmail = md5(gravatarEmail).toString();\n        const picture = `https://www.gravatar.com/avatar/${hashEmail}`;\n        const newPlayer = {\n          name: playerName,\n          score,\n          picture\n        };\n        const ranking = [...currentRanking, newPlayer];\n        localStorage.setItem('ranking', JSON.stringify(ranking));\n      } else {\n        const {\n          score,\n          playerName,\n          gravatarEmail\n        } = this.props;\n        const hashEmail = md5(gravatarEmail).toString();\n        const picture = `https://www.gravatar.com/avatar/${hashEmail}`;\n        const newPlayer = [{\n          name: playerName,\n          score,\n          picture\n        }];\n        localStorage.setItem('ranking', JSON.stringify(newPlayer));\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.addToLocalStorage();\n  }\n\n  render() {\n    const {\n      assertions,\n      score,\n      playAgain\n    } = this.props;\n    const TRES = 3;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }\n    }), assertions < TRES ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"feedback-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 15\n      }\n    }, \"Could be better...\")) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"feedback-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 15\n      }\n    }, \"Well Done!\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }, \"Placar:\"), /*#__PURE__*/React.createElement(\"span\", {\n      \"data-testid\": \"feedback-total-score\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    }, score)), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    }, \"Acertos:\"), /*#__PURE__*/React.createElement(\"span\", {\n      \"data-testid\": \"feedback-total-question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    }, assertions)), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-play-again\",\n      onClick: playAgain,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }, \"Play Again\"))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/ranking\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-ranking\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, \"Ranking\"))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  assertions: state.player.assertions,\n  score: state.player.score,\n  playerName: state.player.name,\n  gravatarEmail: state.player.gravatarEmail\n});\n\nconst mapDispatchToProps = dispatch => ({\n  playAgain: () => dispatch(newGame())\n});\n\nFeedback.propTypes = {\n  assertions: PropTypes.number,\n  score: PropTypes.number\n}.isRequired;\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);","map":{"version":3,"sources":["/home/alisson/Desktop/Projetos/sd-019-a-project-trivia-react-redux/src/pages/Feedback.jsx"],"names":["md5","PropTypes","React","Component","connect","Link","Header","newGame","Feedback","addToLocalStorage","currentRanking","JSON","parse","localStorage","getItem","score","playerName","gravatarEmail","props","hashEmail","toString","picture","newPlayer","name","ranking","setItem","stringify","componentDidMount","render","assertions","playAgain","TRES","mapStateToProps","state","player","mapDispatchToProps","dispatch","propTypes","number","isRequired"],"mappings":"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","sourcesContent":["import md5 from 'crypto-js/md5';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport Header from '../components/Header';\nimport { newGame } from '../Redux/Actions';\n\nclass Feedback extends Component {\n  componentDidMount() {\n    this.addToLocalStorage();\n  }\n\n  addToLocalStorage = () => {\n    const currentRanking = JSON.parse(localStorage.getItem('ranking'));\n    if (currentRanking) {\n      const { score, playerName, gravatarEmail } = this.props;\n      const hashEmail = md5(gravatarEmail).toString();\n      const picture = `https://www.gravatar.com/avatar/${hashEmail}`;\n      const newPlayer = {\n        name: playerName,\n        score,\n        picture,\n      };\n      const ranking = [...currentRanking, newPlayer];\n      localStorage.setItem('ranking', JSON.stringify(ranking));\n    } else {\n      const { score, playerName, gravatarEmail } = this.props;\n      const hashEmail = md5(gravatarEmail).toString();\n      const picture = `https://www.gravatar.com/avatar/${hashEmail}`;\n      const newPlayer = [{\n        name: playerName,\n        score,\n        picture,\n      }];\n      localStorage.setItem('ranking', JSON.stringify(newPlayer));\n    }\n  }\n\n  render() {\n    const { assertions, score, playAgain } = this.props;\n    const TRES = 3;\n    return (\n      <>\n        <Header />\n        { assertions < TRES\n          ? (\n            <div>\n              <p data-testid=\"feedback-text\">Could be better...</p>\n            </div>\n          ) : (\n            <div>\n              <p data-testid=\"feedback-text\">Well Done!</p>\n            </div>\n          )}\n        <div>\n          <p>Placar:</p>\n          <span data-testid=\"feedback-total-score\">{score}</span>\n        </div>\n        <div>\n          <p>Acertos:</p>\n          <span data-testid=\"feedback-total-question\">{assertions}</span>\n        </div>\n        <div>\n          <Link to=\"/\">\n            <button\n              type=\"button\"\n              data-testid=\"btn-play-again\"\n              onClick={ playAgain }\n            >\n              Play Again\n\n            </button>\n          </Link>\n        </div>\n        <div>\n          <Link to=\"/ranking\">\n            <button type=\"button\" data-testid=\"btn-ranking\">Ranking</button>\n          </Link>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  assertions: state.player.assertions,\n  score: state.player.score,\n  playerName: state.player.name,\n  gravatarEmail: state.player.gravatarEmail,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  playAgain: () => dispatch(newGame()),\n});\n\nFeedback.propTypes = {\n  assertions: PropTypes.number,\n  score: PropTypes.number,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);\n"]},"metadata":{},"sourceType":"module"}