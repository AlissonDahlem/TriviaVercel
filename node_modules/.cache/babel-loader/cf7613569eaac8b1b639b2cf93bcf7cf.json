{"ast":null,"code":"var _jsxFileName = \"/home/alisson/Desktop/Projetos/sd-019-a-project-trivia-react-redux/src/pages/Login.jsx\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport '../App.css';\nimport GameSettings from '../components/GameSettings';\nimport { fetchToken, nameAction, gravatarAction } from '../Redux/Actions';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.validateButton = () => {\n      const {\n        email,\n        name\n      } = this.state;\n      const minPasswordLength = 0;\n      const emailFormatRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n      if (name.length > minPasswordLength && email.match(emailFormatRegex)) {\n        this.setState({\n          isButtonDisabled: false\n        });\n      } else {\n        this.setState({\n          isButtonDisabled: true\n        });\n      }\n    };\n\n    this.settingsPage = () => {\n      const {\n        settings\n      } = this.state;\n      this.setState({\n        settings: !settings\n      });\n    };\n\n    this.onInputChange = _ref => {\n      let {\n        target\n      } = _ref;\n      this.setState({\n        [target.name]: target.value\n      }, this.validateButton);\n    };\n\n    this.handleClick = async () => {\n      const {\n        getFetchToken,\n        history,\n        gravatarImg\n      } = this.props;\n      const {\n        email\n      } = this.state;\n      await getFetchToken();\n      gravatarImg(email);\n      history.push('/game');\n    };\n\n    this.state = {\n      email: '',\n      name: '',\n      isButtonDisabled: true,\n      settings: false,\n      gravatar: ''\n    };\n  }\n\n  render() {\n    const {\n      isButtonDisabled,\n      gravatar,\n      name,\n      settings,\n      email\n    } = this.state;\n    const {\n      nameProp\n    } = this.props;\n    console.log(gravatar);\n    nameProp(name);\n\n    if (settings) {\n      return /*#__PURE__*/React.createElement(GameSettings, {\n        loginPage: this.settingsPage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 7\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"nameInput\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"name\",\n      \"data-testid\": \"input-player-name\",\n      id: \"nameInput\",\n      value: name,\n      onChange: this.onInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    })), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"gravatarEmailInput\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"email\",\n      name: \"email\",\n      id: \"gravatarEmailInput\",\n      \"data-testid\": \"input-gravatar-email\",\n      onChange: this.onInputChange,\n      value: email,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      disabled: isButtonDisabled,\n      type: \"button\",\n      \"data-testid\": \"btn-play\",\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }, \"Play\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-settings\",\n      onClick: this.settingsPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    }, \"Settings\"));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  getFetchToken: () => dispatch(fetchToken()),\n  gravatarImg: gravatar => dispatch(gravatarAction(gravatar)),\n  nameProp: name => dispatch(nameAction(name))\n});\n\nconst mapStateToProps = state => ({\n  token: state.token\n});\n\nLogin.propTypes = {\n  history: PropTypes.objectOf(PropTypes.any),\n  getFetchToken: PropTypes.func\n}.isRequired;\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/home/alisson/Desktop/Projetos/sd-019-a-project-trivia-react-redux/src/pages/Login.jsx"],"names":["PropTypes","React","connect","GameSettings","fetchToken","nameAction","gravatarAction","Login","Component","constructor","validateButton","email","name","state","minPasswordLength","emailFormatRegex","length","match","setState","isButtonDisabled","settingsPage","settings","onInputChange","target","value","handleClick","getFetchToken","history","gravatarImg","props","push","gravatar","render","nameProp","console","log","mapDispatchToProps","dispatch","mapStateToProps","token","propTypes","objectOf","any","func","isRequired"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport '../App.css';\nimport GameSettings from '../components/GameSettings';\nimport { fetchToken, nameAction, gravatarAction } from '../Redux/Actions';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      email: '',\n      name: '',\n      isButtonDisabled: true,\n      settings: false,\n      gravatar: '',\n    };\n  }\n\n  validateButton = () => {\n    const { email, name } = this.state;\n    const minPasswordLength = 0;\n    const emailFormatRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n    if (name.length > minPasswordLength && email.match(emailFormatRegex)) {\n      this.setState({\n        isButtonDisabled: false,\n      });\n    } else {\n      this.setState({\n        isButtonDisabled: true,\n      });\n    }\n  }\n\n  settingsPage = () => {\n    const { settings } = this.state;\n    this.setState({\n      settings: !settings,\n    });\n  }\n\nonInputChange = ({ target }) => {\n  this.setState({ [target.name]: target.value }, this.validateButton);\n}\n\nhandleClick = async () => {\n  const { getFetchToken, history, gravatarImg } = this.props;\n  const { email } = this.state;\n  await getFetchToken();\n  gravatarImg(email);\n  history.push('/game');\n}\n\nrender() {\n  const { isButtonDisabled, gravatar, name, settings, email } = this.state;\n  const { nameProp } = this.props;\n  console.log(gravatar);\n  nameProp(name);\n  if (settings) {\n    return (\n      <GameSettings loginPage={ this.settingsPage } />\n    );\n  }\n  return (\n    <>\n      <label htmlFor=\"nameInput\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          data-testid=\"input-player-name\"\n          id=\"nameInput\"\n          value={ name }\n          onChange={ this.onInputChange }\n        />\n      </label>\n\n      <label htmlFor=\"gravatarEmailInput\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          id=\"gravatarEmailInput\"\n          data-testid=\"input-gravatar-email\"\n          onChange={ this.onInputChange }\n          value={ email }\n        />\n      </label>\n      <button\n        disabled={ isButtonDisabled }\n        type=\"button\"\n        data-testid=\"btn-play\"\n        onClick={ this.handleClick }\n      >\n        Play\n      </button>\n      <button\n        type=\"button\"\n        data-testid=\"btn-settings\"\n        onClick={ this.settingsPage }\n      >\n        Settings\n      </button>\n    </>\n  );\n}\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getFetchToken: () => dispatch(fetchToken()),\n  gravatarImg: (gravatar) => dispatch(gravatarAction(gravatar)),\n  nameProp: (name) => dispatch(nameAction(name)),\n});\n\nconst mapStateToProps = (state) => ({\n  token: state.token,\n});\n\nLogin.propTypes = {\n  history: PropTypes.objectOf(PropTypes.any),\n  getFetchToken: PropTypes.func,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n"]},"metadata":{},"sourceType":"module"}