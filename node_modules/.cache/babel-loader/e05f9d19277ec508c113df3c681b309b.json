{"ast":null,"code":"var _jsxFileName = \"/home/alisson/Desktop/Projetos/sd-019-a-project-trivia-react-redux/src/components/Question.js\";\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addQtdCorrectAnswers, addScore, nextQuestion } from '../Redux/Actions';\nimport '../styles/Question.css';\nimport NextButton from './NextButton';\nimport Loading from './Loading';\nimport Timer from './Timer';\n\nclass Question extends Component {\n  constructor() {\n    super();\n\n    this.setNextQuestion = () => {\n      const {\n        currentQuestion,\n        btnNextQuestion,\n        results\n      } = this.props;\n      btnNextQuestion(currentQuestion + 1);\n      this.setState({\n        correctAnswer: results[currentQuestion].correct_answer,\n        questionAnswered: false,\n        answers: [...results[currentQuestion].incorrect_answers, results[currentQuestion].correct_answer]\n      }, () => this.handleQuestions());\n    };\n\n    this.handleQuestions = () => {\n      const {\n        answers\n      } = this.state;\n      const random = this.shuffleAnswers(answers);\n      this.setState({\n        answers: random,\n        loading: false\n      });\n    };\n\n    this.shuffleAnswers = array => {\n      let currentIndex = array.length;\n      let randomIndex; // While there remain elements to shuffle...\n\n      while (currentIndex !== 0) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1; // And swap it with the current element.\n\n        [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n      }\n\n      return array;\n    };\n\n    this.isCorrect = answer => {\n      const {\n        correctAnswer,\n        answers\n      } = this.state;\n      const wrongAnswers = answers.filter(a => a !== correctAnswer);\n      if (correctAnswer === answer) return 'correct-answer';\n      return `wrong-answer-${wrongAnswers.indexOf(answer)}`;\n    };\n\n    this.scoreCalculation = (answer, timer, difficulty) => {\n      const {\n        correctAnswer,\n        qtdCorrectAnswers\n      } = this.state;\n      const {\n        score,\n        newScore,\n        countCorrectAnswers\n      } = this.props;\n      let difficultyValue = 0;\n      const UM = 1;\n      const DOIS = 2;\n      const TRES = 3;\n      const DEZ = 10;\n\n      if (difficulty === 'hard') {\n        difficultyValue = TRES;\n      }\n\n      if (difficulty === 'medium') {\n        difficultyValue = DOIS;\n      }\n\n      if (difficulty === 'easy') {\n        difficultyValue = UM;\n      }\n\n      if (correctAnswer === answer) {\n        newScore(score + DEZ + difficultyValue * timer);\n        countCorrectAnswers(qtdCorrectAnswers + 1);\n      }\n    };\n\n    this.handleClick = selected => {\n      const {\n        timer,\n        results,\n        currentQuestion\n      } = this.props;\n      const level = results[currentQuestion].difficulty;\n      this.setState({\n        color: true\n      });\n      this.scoreCalculation(selected, timer, level);\n      this.setState({\n        questionAnswered: true\n      });\n    };\n\n    this.isActive = answer => {\n      const {\n        color,\n        correctAnswer\n      } = this.state;\n\n      if (color === true) {\n        if (correctAnswer === answer) return 'correct-answer';\n        return 'wrong-answer';\n      }\n    };\n\n    this.verifyTimer = () => {\n      const {\n        questionAnswered\n      } = this.state;\n      const {\n        timer\n      } = this.props;\n\n      if (timer === 0 || questionAnswered === true) {\n        return true;\n      }\n    };\n\n    this.state = {\n      correctAnswer: '',\n      answers: [],\n      loading: true,\n      color: false,\n      questionAnswered: false,\n      qtdCorrectAnswers: 0\n    };\n  }\n\n  componentDidMount() {\n    const {\n      results,\n      currentQuestion\n    } = this.props;\n    this.setState({\n      correctAnswer: results[currentQuestion].correct_answer,\n      answers: [...results[currentQuestion].incorrect_answers, results[currentQuestion].correct_answer]\n    }, () => this.handleQuestions());\n  }\n\n  render() {\n    const {\n      results,\n      currentQuestion\n    } = this.props;\n    const {\n      loading,\n      answers,\n      questionAnswered\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }\n    }, loading === true ? /*#__PURE__*/React.createElement(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }\n    }, questionAnswered && /*#__PURE__*/React.createElement(NextButton, {\n      nextQuestion: this.setNextQuestion,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"question-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 15\n      }\n    }, results[currentQuestion].category), /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 15\n      }\n    }, results[currentQuestion].question), /*#__PURE__*/React.createElement(\"div\", {\n      \"data-testid\": \"answer-options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 15\n      }\n    }, answers.map((answer, index) => /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      key: index,\n      \"data-testid\": this.isCorrect(answer),\n      className: this.isActive(answer),\n      onClick: () => this.handleClick(answer),\n      disabled: this.verifyTimer(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 19\n      }\n    }, answer))), /*#__PURE__*/React.createElement(Timer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 15\n      }\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  results: state.game.results,\n  currentQuestion: state.game.currentQuestion,\n  timer: state.game.timer,\n  score: state.player.score\n});\n\nconst mapDispatchToProps = dispatch => ({\n  newScore: score => dispatch(addScore(score)),\n  btnNextQuestion: question => dispatch(nextQuestion(question)),\n  countCorrectAnswers: answer => dispatch(addQtdCorrectAnswers(answer))\n});\n\nQuestion.propTypes = {\n  results: PropTypes.arrayOf(PropTypes.any),\n  currentQuestion: PropTypes.number\n}.isRequired;\nexport default connect(mapStateToProps, mapDispatchToProps)(Question);","map":{"version":3,"sources":["/home/alisson/Desktop/Projetos/sd-019-a-project-trivia-react-redux/src/components/Question.js"],"names":["PropTypes","React","Component","connect","addQtdCorrectAnswers","addScore","nextQuestion","NextButton","Loading","Timer","Question","constructor","setNextQuestion","currentQuestion","btnNextQuestion","results","props","setState","correctAnswer","correct_answer","questionAnswered","answers","incorrect_answers","handleQuestions","state","random","shuffleAnswers","loading","array","currentIndex","length","randomIndex","Math","floor","isCorrect","answer","wrongAnswers","filter","a","indexOf","scoreCalculation","timer","difficulty","qtdCorrectAnswers","score","newScore","countCorrectAnswers","difficultyValue","UM","DOIS","TRES","DEZ","handleClick","selected","level","color","isActive","verifyTimer","componentDidMount","render","category","question","map","index","mapStateToProps","game","player","mapDispatchToProps","dispatch","propTypes","arrayOf","any","number","isRequired"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addQtdCorrectAnswers, addScore, nextQuestion } from '../Redux/Actions';\nimport '../styles/Question.css';\nimport NextButton from './NextButton';\nimport Loading from './Loading';\nimport Timer from './Timer';\n\nclass Question extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      correctAnswer: '',\n      answers: [],\n      loading: true,\n      color: false,\n      questionAnswered: false,\n      qtdCorrectAnswers: 0,\n    };\n  }\n\n  componentDidMount() {\n    const { results, currentQuestion } = this.props;\n    this.setState({\n      correctAnswer: results[currentQuestion].correct_answer,\n      answers: [...results[currentQuestion].incorrect_answers,\n        results[currentQuestion].correct_answer],\n    }, () => this.handleQuestions());\n  }\n\n  setNextQuestion = () => {\n    const { currentQuestion, btnNextQuestion, results } = this.props;\n    btnNextQuestion(currentQuestion + 1);\n    this.setState({\n      correctAnswer: results[currentQuestion].correct_answer,\n      questionAnswered: false,\n      answers: [...results[currentQuestion].incorrect_answers,\n        results[currentQuestion].correct_answer],\n    }, () => this.handleQuestions());\n  }\n\n  handleQuestions = () => {\n    const { answers } = this.state;\n    const random = this.shuffleAnswers(answers);\n    this.setState({\n      answers: random,\n      loading: false,\n    });\n  }\n\n  // Função para ramdomizar o array de respostas baseado no algoritimo de Fisher–Yates shuffle\n  // https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n  shuffleAnswers = (array) => {\n    let currentIndex = array.length; let\n      randomIndex;\n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n    return array;\n  }\n\n  isCorrect = (answer) => {\n    const { correctAnswer, answers } = this.state;\n    const wrongAnswers = answers.filter((a) => a !== correctAnswer);\n    if (correctAnswer === answer) return 'correct-answer';\n    return (`wrong-answer-${wrongAnswers.indexOf(answer)}`);\n  }\n\n  scoreCalculation = (answer, timer, difficulty) => {\n    const { correctAnswer, qtdCorrectAnswers } = this.state;\n    const { score, newScore, countCorrectAnswers } = this.props;\n    let difficultyValue = 0;\n    const UM = 1;\n    const DOIS = 2;\n    const TRES = 3;\n    const DEZ = 10;\n    if (difficulty === 'hard') {\n      difficultyValue = TRES;\n    }\n    if (difficulty === 'medium') {\n      difficultyValue = DOIS;\n    }\n    if (difficulty === 'easy') {\n      difficultyValue = UM;\n    }\n    if (correctAnswer === answer) {\n      newScore(score + DEZ + (difficultyValue * timer));\n      countCorrectAnswers(qtdCorrectAnswers + 1);\n    }\n  };\n\n  handleClick = (selected) => {\n    const { timer, results, currentQuestion } = this.props;\n    const level = results[currentQuestion].difficulty;\n    this.setState({\n      color: true,\n    });\n    this.scoreCalculation(selected, timer, level);\n    this.setState({\n      questionAnswered: true,\n    });\n  }\n\n  isActive = (answer) => {\n    const { color, correctAnswer } = this.state;\n    if (color === true) {\n      if (correctAnswer === answer) return 'correct-answer';\n      return 'wrong-answer';\n    }\n  }\n\n  verifyTimer = () => {\n    const { questionAnswered } = this.state;\n    const { timer } = this.props;\n    if (timer === 0 || questionAnswered === true) {\n      return true;\n    }\n  }\n\n  render() {\n    const { results, currentQuestion } = this.props;\n    const { loading, answers, questionAnswered } = this.state;\n    return (\n      <div>\n        {loading === true\n          ? <Loading />\n          : (\n            <div>\n              { questionAnswered && <NextButton nextQuestion={ this.setNextQuestion } /> }\n              <h2 data-testid=\"question-category\">{results[currentQuestion].category}</h2>\n              <p data-testid=\"question-text\">\n                {results[currentQuestion].question}\n              </p>\n              <div data-testid=\"answer-options\">\n                {answers.map((answer, index) => (\n                  <button\n                    type=\"button\"\n                    key={ index }\n                    data-testid={ this.isCorrect(answer) }\n                    className={ this.isActive(answer) }\n                    onClick={ () => this.handleClick(answer) }\n                    disabled={ this.verifyTimer() }\n                  >\n                    {answer}\n                  </button>))}\n              </div>\n              <Timer />\n            </div>\n          )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  results: state.game.results,\n  currentQuestion: state.game.currentQuestion,\n  timer: state.game.timer,\n  score: state.player.score,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  newScore: (score) => dispatch(addScore(score)),\n  btnNextQuestion: (question) => dispatch(nextQuestion(question)),\n  countCorrectAnswers: (answer) => dispatch(addQtdCorrectAnswers(answer)),\n});\n\nQuestion.propTypes = {\n  results: PropTypes.arrayOf(PropTypes.any),\n  currentQuestion: PropTypes.number,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Question);\n"]},"metadata":{},"sourceType":"module"}